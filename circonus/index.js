'use strict';
var circonus = circonus || {};

// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */

/**
 * @enum
 */
circonus.MetricValueUnion = {
  NONE: 0,
  IntValue: 1,
  UintValue: 2,
  LongValue: 3,
  UlongValue: 4,
  DoubleValue: 5,
  StringValue: 6,
  Histogram: 7,
  AbsentNumericValue: 8,
  AbsentStringValue: 9,
  AbsentHistogramValue: 10
};

/**
 * @constructor
 */
circonus.IntValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.IntValue}
 */
circonus.IntValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.IntValue=} obj
 * @returns {circonus.IntValue}
 */
circonus.IntValue.getRootAsIntValue = function(bb, obj) {
  return (obj || new circonus.IntValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
circonus.IntValue.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.IntValue.startIntValue = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 */
circonus.IntValue.addValue = function(builder, value) {
  builder.addFieldInt32(0, value, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.IntValue.endIntValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.UintValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.UintValue}
 */
circonus.UintValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.UintValue=} obj
 * @returns {circonus.UintValue}
 */
circonus.UintValue.getRootAsUintValue = function(bb, obj) {
  return (obj || new circonus.UintValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
circonus.UintValue.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.UintValue.startUintValue = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 */
circonus.UintValue.addValue = function(builder, value) {
  builder.addFieldInt32(0, value, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.UintValue.endUintValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.LongValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.LongValue}
 */
circonus.LongValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.LongValue=} obj
 * @returns {circonus.LongValue}
 */
circonus.LongValue.getRootAsLongValue = function(bb, obj) {
  return (obj || new circonus.LongValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
circonus.LongValue.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.LongValue.startLongValue = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} value
 */
circonus.LongValue.addValue = function(builder, value) {
  builder.addFieldInt64(0, value, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.LongValue.endLongValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.UlongValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.UlongValue}
 */
circonus.UlongValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.UlongValue=} obj
 * @returns {circonus.UlongValue}
 */
circonus.UlongValue.getRootAsUlongValue = function(bb, obj) {
  return (obj || new circonus.UlongValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
circonus.UlongValue.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.UlongValue.startUlongValue = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} value
 */
circonus.UlongValue.addValue = function(builder, value) {
  builder.addFieldInt64(0, value, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.UlongValue.endUlongValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.DoubleValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.DoubleValue}
 */
circonus.DoubleValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.DoubleValue=} obj
 * @returns {circonus.DoubleValue}
 */
circonus.DoubleValue.getRootAsDoubleValue = function(bb, obj) {
  return (obj || new circonus.DoubleValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
circonus.DoubleValue.prototype.value = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.DoubleValue.startDoubleValue = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} value
 */
circonus.DoubleValue.addValue = function(builder, value) {
  builder.addFieldFloat64(0, value, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.DoubleValue.endDoubleValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.StringValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.StringValue}
 */
circonus.StringValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.StringValue=} obj
 * @returns {circonus.StringValue}
 */
circonus.StringValue.getRootAsStringValue = function(bb, obj) {
  return (obj || new circonus.StringValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
circonus.StringValue.prototype.value = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.StringValue.startStringValue = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
circonus.StringValue.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(0, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.StringValue.endStringValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.AbsentNumericValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.AbsentNumericValue}
 */
circonus.AbsentNumericValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.AbsentNumericValue=} obj
 * @returns {circonus.AbsentNumericValue}
 */
circonus.AbsentNumericValue.getRootAsAbsentNumericValue = function(bb, obj) {
  return (obj || new circonus.AbsentNumericValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.AbsentNumericValue.startAbsentNumericValue = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.AbsentNumericValue.endAbsentNumericValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.AbsentStringValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.AbsentStringValue}
 */
circonus.AbsentStringValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.AbsentStringValue=} obj
 * @returns {circonus.AbsentStringValue}
 */
circonus.AbsentStringValue.getRootAsAbsentStringValue = function(bb, obj) {
  return (obj || new circonus.AbsentStringValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.AbsentStringValue.startAbsentStringValue = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.AbsentStringValue.endAbsentStringValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.AbsentHistogramValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.AbsentHistogramValue}
 */
circonus.AbsentHistogramValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.AbsentHistogramValue=} obj
 * @returns {circonus.AbsentHistogramValue}
 */
circonus.AbsentHistogramValue.getRootAsAbsentHistogramValue = function(bb, obj) {
  return (obj || new circonus.AbsentHistogramValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.AbsentHistogramValue.startAbsentHistogramValue = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.AbsentHistogramValue.endAbsentHistogramValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.HistogramBucket = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.HistogramBucket}
 */
circonus.HistogramBucket.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.HistogramBucket=} obj
 * @returns {circonus.HistogramBucket}
 */
circonus.HistogramBucket.getRootAsHistogramBucket = function(bb, obj) {
  return (obj || new circonus.HistogramBucket).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
circonus.HistogramBucket.prototype.val = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
circonus.HistogramBucket.prototype.exp = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {flatbuffers.Long}
 */
circonus.HistogramBucket.prototype.count = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.HistogramBucket.startHistogramBucket = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} val
 */
circonus.HistogramBucket.addVal = function(builder, val) {
  builder.addFieldInt8(0, val, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} exp
 */
circonus.HistogramBucket.addExp = function(builder, exp) {
  builder.addFieldInt8(1, exp, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} count
 */
circonus.HistogramBucket.addCount = function(builder, count) {
  builder.addFieldInt64(2, count, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.HistogramBucket.endHistogramBucket = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.Histogram = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.Histogram}
 */
circonus.Histogram.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.Histogram=} obj
 * @returns {circonus.Histogram}
 */
circonus.Histogram.getRootAsHistogram = function(bb, obj) {
  return (obj || new circonus.Histogram).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {circonus.HistogramBucket=} obj
 * @returns {circonus.HistogramBucket}
 */
circonus.Histogram.prototype.buckets = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new circonus.HistogramBucket).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
circonus.Histogram.prototype.bucketsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.Histogram.startHistogram = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bucketsOffset
 */
circonus.Histogram.addBuckets = function(builder, bucketsOffset) {
  builder.addFieldOffset(0, bucketsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
circonus.Histogram.createBucketsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
circonus.Histogram.startBucketsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.Histogram.endHistogram = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
circonus.MetricValue = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.MetricValue}
 */
circonus.MetricValue.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.MetricValue=} obj
 * @returns {circonus.MetricValue}
 */
circonus.MetricValue.getRootAsMetricValue = function(bb, obj) {
  return (obj || new circonus.MetricValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
circonus.MetricValue.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {flatbuffers.Long}
 */
circonus.MetricValue.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {circonus.MetricValueUnion}
 */
circonus.MetricValue.prototype.valueType = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {circonus.MetricValueUnion} */ (this.bb.readUint8(this.bb_pos + offset)) : circonus.MetricValueUnion.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
circonus.MetricValue.prototype.value = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @returns {number}
 */
circonus.MetricValue.prototype.generation = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
circonus.MetricValue.prototype.streamTags = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
circonus.MetricValue.prototype.streamTagsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.MetricValue.startMetricValue = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
circonus.MetricValue.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} timestamp
 */
circonus.MetricValue.addTimestamp = function(builder, timestamp) {
  builder.addFieldInt64(1, timestamp, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {circonus.MetricValueUnion} valueType
 */
circonus.MetricValue.addValueType = function(builder, valueType) {
  builder.addFieldInt8(2, valueType, circonus.MetricValueUnion.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
circonus.MetricValue.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(3, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} generation
 */
circonus.MetricValue.addGeneration = function(builder, generation) {
  builder.addFieldInt16(4, generation, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} streamTagsOffset
 */
circonus.MetricValue.addStreamTags = function(builder, streamTagsOffset) {
  builder.addFieldOffset(5, streamTagsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
circonus.MetricValue.createStreamTagsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
circonus.MetricValue.startStreamTagsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.MetricValue.endMetricValue = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */

/**
 * @constructor
 */
circonus.Metric = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.Metric}
 */
circonus.Metric.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.Metric=} obj
 * @returns {circonus.Metric}
 */
circonus.Metric.getRootAsMetric = function(bb, obj) {
  return (obj || new circonus.Metric).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
circonus.Metric.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('CIMM');
};

/**
 * @returns {flatbuffers.Long}
 */
circonus.Metric.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
circonus.Metric.prototype.checkName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
circonus.Metric.prototype.checkUuid = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
circonus.Metric.prototype.accountId = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {circonus.MetricValue=} obj
 * @returns {circonus.MetricValue|null}
 */
circonus.Metric.prototype.value = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new circonus.MetricValue).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.Metric.startMetric = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} timestamp
 */
circonus.Metric.addTimestamp = function(builder, timestamp) {
  builder.addFieldInt64(0, timestamp, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} checkNameOffset
 */
circonus.Metric.addCheckName = function(builder, checkNameOffset) {
  builder.addFieldOffset(1, checkNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} checkUuidOffset
 */
circonus.Metric.addCheckUuid = function(builder, checkUuidOffset) {
  builder.addFieldOffset(2, checkUuidOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accountId
 */
circonus.Metric.addAccountId = function(builder, accountId) {
  builder.addFieldInt32(3, accountId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueOffset
 */
circonus.Metric.addValue = function(builder, valueOffset) {
  builder.addFieldOffset(4, valueOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.Metric.endMetric = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
circonus.Metric.finishMetricBuffer = function(builder, offset) {
  builder.finish(offset, 'CIMM');
};

// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */

/**
 * @constructor
 */
circonus.MetricBatch = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.MetricBatch}
 */
circonus.MetricBatch.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.MetricBatch=} obj
 * @returns {circonus.MetricBatch}
 */
circonus.MetricBatch.getRootAsMetricBatch = function(bb, obj) {
  return (obj || new circonus.MetricBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
circonus.MetricBatch.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('CIMB');
};

/**
 * @returns {flatbuffers.Long}
 */
circonus.MetricBatch.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
circonus.MetricBatch.prototype.checkName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
circonus.MetricBatch.prototype.checkUuid = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
circonus.MetricBatch.prototype.accountId = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {circonus.MetricValue=} obj
 * @returns {circonus.MetricValue}
 */
circonus.MetricBatch.prototype.metrics = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new circonus.MetricValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
circonus.MetricBatch.prototype.metricsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.MetricBatch.startMetricBatch = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} timestamp
 */
circonus.MetricBatch.addTimestamp = function(builder, timestamp) {
  builder.addFieldInt64(0, timestamp, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} checkNameOffset
 */
circonus.MetricBatch.addCheckName = function(builder, checkNameOffset) {
  builder.addFieldOffset(1, checkNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} checkUuidOffset
 */
circonus.MetricBatch.addCheckUuid = function(builder, checkUuidOffset) {
  builder.addFieldOffset(2, checkUuidOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} accountId
 */
circonus.MetricBatch.addAccountId = function(builder, accountId) {
  builder.addFieldInt32(3, accountId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} metricsOffset
 */
circonus.MetricBatch.addMetrics = function(builder, metricsOffset) {
  builder.addFieldOffset(4, metricsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
circonus.MetricBatch.createMetricsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
circonus.MetricBatch.startMetricsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.MetricBatch.endMetricBatch = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
circonus.MetricBatch.finishMetricBatchBuffer = function(builder, offset) {
  builder.finish(offset, 'CIMB');
};

// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */

/**
 * @constructor
 */
circonus.MetricList = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {circonus.MetricList}
 */
circonus.MetricList.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {circonus.MetricList=} obj
 * @returns {circonus.MetricList}
 */
circonus.MetricList.getRootAsMetricList = function(bb, obj) {
  return (obj || new circonus.MetricList).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
circonus.MetricList.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('CIML');
};

/**
 * @param {number} index
 * @param {circonus.Metric=} obj
 * @returns {circonus.Metric}
 */
circonus.MetricList.prototype.metrics = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new circonus.Metric).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
circonus.MetricList.prototype.metricsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
circonus.MetricList.startMetricList = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} metricsOffset
 */
circonus.MetricList.addMetrics = function(builder, metricsOffset) {
  builder.addFieldOffset(0, metricsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
circonus.MetricList.createMetricsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
circonus.MetricList.startMetricsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
circonus.MetricList.endMetricList = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
circonus.MetricList.finishMetricListBuffer = function(builder, offset) {
  builder.finish(offset, 'CIML');
};

module.exports = circonus;
